#!/usr/bin/env python
from __future__ import division
import argparse
import json
import os
import numpy as np
import nibabel as nib
from phantomas.geometry.fiber import FiberSource
from phantomas.geometry.models import Fiber
from phantomas.geometry.rois import target_rois
from phantomas.mr_simul.partial_volume \
   import compute_affine_matrix


# Function to check if file exists
def is_valid_file(parser, arg):
    if not os.path.exists(arg):
       parser.error("Cannot open file %s." % arg)
    else:
       return open(arg, 'r')


# The command-line arguments parser.
####################################
description="Prepare regions of interest for connectivity analysis."

parser = argparse.ArgumentParser(description=description)
parser.add_argument('geometry',
                    type=lambda x: is_valid_file(parser,x),
                    help="A JSON-formatted file describing fiber and phantom "
                         "geometries.")
parser.add_argument('--res', type=float, default=2.0,
    help="Diffusion-weighted images resolution in mm.")
parser.add_argument('--fov', type=float, default=None,
                    help="Field of view in mm. If None, adapts to the size "
                         "of the phantom.")
args = parser.parse_args()


print "Reading geometry description..."
#######################################
geometry = json.load(args.geometry)

# Read fiber bundles
fibers_dict = geometry.get("fiber_geometries", {})
nb_points = 100
ts = np.linspace(0, 1., nb_points)
fibers = []
for fiber_name, fiber_params in fibers_dict.items():
    control_points = np.asarray(fiber_params["control_points"])
    nb_control_points = len(control_points) // 3
    control_points = control_points.reshape((nb_control_points, 3))
    radius = fiber_params["radius"]
    tangents_mode = fiber_params.get("tangents", "symmetric")
    f = FiberSource(control_points, tangents=tangents_mode)
    fiber = Fiber('from_points', points=f(ts), radius=radius)
    fibers.append(fiber)


# Read other phantom parameters
phantom_radius = geometry.get("phantom_radius", None)
if phantom_radius == None:
    fiber = fibers[0].get_points()
    phantom_radius = np.linalg.norm(fiber[0])

phantom_fov = args.fov
if phantom_fov == None:
    phantom_fov = 2.2 * phantom_radius


print "Preparing rois for connectivity..."
##########################################
affine = compute_affine_matrix(args.res, phantom_fov)
target_rois, connectivity_matrix = target_rois(fibers, args.res, phantom_fov)
target_rois_img = nib.Nifti1Image(target_rois, affine)
nib.save(target_rois_img, "target_rois.nii.gz")
np.savetxt("connectivity_matrix.txt", connectivity_matrix, fmt="%1d")
