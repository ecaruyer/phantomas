#!/usr/bin/env python
from __future__ import division
import argparse
import json
import os
import numpy as np
from phantomas.geometry.fiber import FiberSource
from phantomas.geometry.models import Fiber, IsotropicRegion
from phantomas.mr_simul.partial_volume \
    import (compute_affine_matrix,
            compute_spherical_region_masks,
            compute_fiber_masks,
            compute_volume_fractions)
from phantomas.mr_simul.image_formation \
    import (relaxation_time_images,
            mr_signal,
            rician_noise,
            get_tissue_physical_parameters)
from phantomas.mr_simul.fod \
    import (compute_directions,
            compute_fod,
            compute_fod_sh)
from phantomas.utils import shm
from phantomas.mr_simul.synthetic import GaussianModel
import nibabel as nib
import sys
import warnings


# Function to check if file exists
def is_valid_file(parser, arg):
    if not os.path.exists(arg):
        parser.error("Cannot open file %s." % arg)
    else:
        return open(arg, 'r')


# The command-line arguments parser.
####################################
description = "Simulates diffusion-weighted images from the description of a " \
    "phantom."

parser = argparse.ArgumentParser(description=description)
parser.add_argument('geometry',
                    type=lambda x: is_valid_file(parser, x),
                    help="A JSON-formatted file describing fiber and phantom "
                         "geometries.")
parser.add_argument('-b', dest='bvals', required=True,
                    help="b-values in a text file.")
parser.add_argument('-r', dest='bvecs', required=True,
                    help="b-vectors in a text file.")
parser.add_argument('--b_perps', type=str, default=None,
                    help="If supplied, b_perpendiculars of b-tensors in a text file.")
parser.add_argument('--output_dir', default="./",
                    help="Output directory. (%(default)s)")
parser.add_argument('--output', dest='output', required=False, default="dwis.nii.gz",
                    help="Output dwis file name. (%(default)s)")
parser.add_argument('--res', type=float, default=2.0,
                    help="Diffusion-weighted images resolution in mm. (%(default)s)")
parser.add_argument('--fov', type=float, default=None,
                    help="Field of view in mm. If None, adapts to the size "
                         "of the phantom.")
parser.add_argument('--snr', type=float, default=100.,
                    help="Signal-to-noise ratio of the simulated images. "
                         "0.0 for noise-free images. (%(default)s)")
parser.add_argument('--seed', type=int, default=None,
                    help="Seed for the random number generator. (%(default)s)")
parser.add_argument('--lambda1', type=float, default=1.7e-3,
                    help="Lambda 1 parameter of the fiber tensor. (%(default)s)")
parser.add_argument('--lambda2', type=float, default=0.2e-3,
                    help="Lambda 2 and 3 parameters of the fiber tensor. (%(default)s)")
parser.add_argument('--order_sh', type=int, default=8, metavar='ORDER',
                    help="Spherical harmonics truncation order for the FOD. (%(default)s)")
parser.add_argument('--export_fod', default=None, metavar='BASIS',
                    help="Either 'dipy' or 'mrtrix': sets the convention of "
                    "the exported FODs.")
parser.add_argument('--export_vf', action='store_true', required=False,
                    default=False, help='If supplied, saves the volume fraction for each tissue type.')

args = parser.parse_args()


print("Reading geometry description...")
#######################################
geometry = json.load(args.geometry)

# Read fiber bundles
fibers_dict = geometry.get("fiber_geometries", {})
nb_points = 100
ts = np.linspace(0, 1., nb_points)
fibers = []
fiber_trajectories = []
fiber_tangents = []
fiber_radii = []
for fiber_name, fiber_params in fibers_dict.items():
    control_points = np.asarray(fiber_params["control_points"])
    nb_control_points = len(control_points) // 3
    control_points = control_points.reshape((nb_control_points, 3))
    radius = fiber_params["radius"]
    tangents_mode = fiber_params.get("tangents", "symmetric")
    f = FiberSource(control_points, tangents=tangents_mode)
    fiber = Fiber('from_points', points=f(ts), radius=radius)
    fibers.append(fiber)
    fiber_trajectories.append(f(ts))
    fiber_tangents.append(f.tangents(ts))
    fiber_radii.append(radius)
print("Found %d fibers." % len(fibers))

# Read Isotropic regions
regions_dict = geometry.get("isotropic_regions", {})
regions = []
region_centers = []
region_radii = []
for region_name, region_params in regions_dict.items():
    radius = region_params["radius"]
    center = np.asarray(region_params["center"])
    volume_fraction = region_params.get("volume_fraction", 1.0)
    region = IsotropicRegion(radius, center, volume_fraction)
    regions.append(region)
    region_centers.append(center)
    region_radii.append(radius)
print("Found %d regions." % len(regions))

# Read other phantom parameters
phantom_radius = geometry.get("phantom_radius", None)
if phantom_radius is None:
    fiber = fibers[0].get_points()
    phantom_radius = np.linalg.norm(fiber[0])

phantom_fov = args.fov
if phantom_fov is None:
    phantom_fov = 2.2 * phantom_radius


print("\tReading acquisition sequence...")
bvals = np.loadtxt(args.bvals)
if (np.max(bvals) < 1000) or (np.max(bvals) > 10000) :
    warnings.warn("The maximum b-value is not in the range 1000 to 10000 [s/mm^2].")
bvecs = np.loadtxt(args.bvecs)
nb_acquisitions = bvals.shape[0]
if bvecs.shape[1] != 3:
    if bvecs.shape[0] != 3:
        sys.stderr.write("The .bvec file should contain 3d vectors.")
        sys.exit(1)
    bvecs = bvecs.T
indices_dwis = (bvals > 0)
gradient_directions = bvecs[indices_dwis]
gradient_bvals = bvals[indices_dwis]
np.clip(gradient_directions, -1, 1, gradient_directions)
b_perps = args.b_perps
if b_perps != None :
    bperps = np.loadtxt(b_perps)
    gradient_bperps = bperps[indices_dwis]

print("Preparing diffusion-weighted images...")
###############################################

print("\tComputing mask for each structure.")
affine = compute_affine_matrix(args.res, phantom_fov)
phantom_center = np.array([0., 0., 0.])
region_masks = compute_spherical_region_masks(region_centers, region_radii,
                                              args.res, phantom_fov)
fiber_masks = compute_fiber_masks(fibers, args.res, phantom_fov)
gm_mask = compute_spherical_region_masks([phantom_center],
                                         [phantom_radius], args.res,
                                         phantom_fov)[..., 0]


print("\tComputing volume fraction for each tissue type.")
background_vf, gm_vf, wm_vf, csf_vf = \
    compute_volume_fractions(np.asarray([0, 0, 0, ]), phantom_radius, gm_mask,
                             fibers, fiber_masks,
                             regions, region_masks,
                             args.res, phantom_fov)

if args.export_vf:
    print("Exporting volume fraction.")

    gm_vf_img = nib.Nifti1Image(gm_vf, affine)
    nib.save(gm_vf_img, os.path.join(args.output_dir, "gm_vf.nii.gz"))

    wm_vf_img = nib.Nifti1Image(wm_vf, affine)
    nib.save(wm_vf_img, os.path.join(args.output_dir, "wm_vf.nii.gz"))

    csf_vf_img = nib.Nifti1Image(csf_vf, affine)
    nib.save(csf_vf_img, os.path.join(args.output_dir, "csf_vf.nii.gz"))


print("\tPreparing relaxation time fields for each tissue.")
# First initialize the random number generator - if seed provided
rng = np.random.RandomState(args.seed)
image_shape = gm_mask.shape
dim_x, dim_y, dim_z = image_shape
wm_t1, wm_t2 = relaxation_time_images(image_shape, 'wm', rng=rng)
gm_t1, gm_t2 = relaxation_time_images(image_shape, 'gm', rng=rng)
csf_t1, csf_t2 = relaxation_time_images(image_shape, 'csf', rng=rng)


print("\tComputing fiber orientation distribution.")
order_sh = args.order_sh
dim_sh = shm.dimension(order_sh)
fods = np.zeros((dim_x, dim_y, dim_z, dim_sh))
wm_mask = np.any(fiber_masks > 0, axis=-1)
wm_indices = np.nonzero(wm_mask)
resolution = 9
for i, j, k in zip(wm_indices[0], wm_indices[1], wm_indices[2]):
    voxel_center = np.dot(affine, np.asarray([i, j, k, 1.0]))[:3]
    fiber_indices = np.nonzero(fiber_masks[i, j, k])[0]
    fod_samples, fod_weights = compute_directions(
        [fiber_trajectories[n] for n in fiber_indices],
        [fiber_tangents[n] for n in fiber_indices],
        [fiber_radii[n] for n in fiber_indices],
        voxel_center, args.res, resolution)
    fod_weights /= fod_weights.sum()
    fods[i, j, k] = compute_fod(fod_samples, fod_weights, kappa=50, sh=True,
                                order_sh=order_sh)


if args.export_fod is not None:
    print("Exporting fods following %s's convention." % args.export_fod)
    if args.export_fod == "dipy":
        fods_img = nib.Nifti1Image(fods * wm_vf[..., np.newaxis], affine)
    elif args.export_fod == "mrtrix":
        conversion_matrix = shm.convert_to_mrtrix(order_sh)
        fods_img = nib.Nifti1Image(np.dot(fods, conversion_matrix.T)
                                   * wm_vf[..., np.newaxis], affine)
    nib.save(fods_img, os.path.join(args.output_dir, "fods.nii.gz"))


print("\tPrepare synthetic model of diffusion and convolution with FOD.")
lambda1 = args.lambda1
lambda2 = args.lambda2
model = GaussianModel(lambda1, lambda2)
signal_operators = {}
gradient_theta = np.arccos(gradient_directions[:, 2])
gradient_phi = np.arctan2(gradient_directions[:, 1], gradient_directions[:, 0])
H = shm.matrix(gradient_theta, gradient_phi, order=order_sh)
if b_perps == None :
    unique_bvals = set(bvals[indices_dwis].tolist())
    for bval in unique_bvals :
        rs = model.signal_convolution_sh(order_sh, bval)
        indices = (gradient_bvals == bval)
        H[indices] *= rs[np.newaxis, :]
else :
    bvals_bperps = zip(bvals[indices_dwis], bperps[indices_dwis])
    unique_bvals_bperps = set(bvals_bperps)
    for (bval, bperp) in unique_bvals_bperps :
        rs = model.signal_convolution_sh(order_sh, bval, bperp = bperp)
        indices = ((gradient_bvals == bval) & (gradient_bperps == bperp))
        H[indices] *= rs[np.newaxis, :]


print("\tCompute diffusion signal attenuation.")
wm_attenuation = np.ones((dim_x, dim_y, dim_z, nb_acquisitions))
wm_attenuation[..., indices_dwis] = np.dot(fods, H.T)

wm_attenuation_img = nib.Nifti1Image(wm_attenuation, affine)
nib.save(wm_attenuation_img, os.path.join(args.output_dir, "wm_attenuation.nii.gz"))

gm_diffusivity = 0.2e-3
gm_attenuation = np.ones((dim_x, dim_y, dim_z, nb_acquisitions)) \
    * np.exp(-bvals * gm_diffusivity)[np.newaxis, np.newaxis, np.newaxis, :]

csf_diffusivity = 3.0e-3
csf_attenuation = np.ones((dim_x, dim_y, dim_z, nb_acquisitions)) \
    * np.exp(-bvals * csf_diffusivity)[np.newaxis, np.newaxis, np.newaxis, :]


print("\tCompute diffusion-weighted images")
te, tr = 0.09, 5.0
b0_wm = mr_signal(wm_vf, wm_t1, wm_t2,
                  0 * gm_vf, gm_t1, gm_t2,
                  0 * csf_vf, csf_t1, csf_t2,
                  te, tr)
b0_gm = mr_signal(0 * wm_vf, wm_t1, wm_t2,
                  gm_vf, gm_t1, gm_t2,
                  0 * csf_vf, csf_t1, csf_t2,
                  te, tr)
b0_csf = mr_signal(0 * wm_vf, wm_t1, wm_t2,
                   0 * gm_vf, gm_t1, gm_t2,
                   csf_vf, csf_t1, csf_t2,
                   te, tr)
dwis = b0_wm[..., np.newaxis] * wm_attenuation \
    + b0_gm[..., np.newaxis] * gm_attenuation \
    + b0_csf[..., np.newaxis] * csf_attenuation

print("\tCorrupt images by Rician noise")
if args.snr > 0.:
    wm_mean_t1, wm_mean_t2, wm_rho = get_tissue_physical_parameters('wm')
    s0 = wm_rho * (1.0 - np.exp(-tr / wm_mean_t1)) * np.exp(-te / wm_mean_t2)
    sigma = s0 / args.snr
    dwis = rician_noise(dwis, sigma, rng=rng)

print("\tChange image type to INT16")
scale = 2 ** 14
dwis = np.asarray(scale * dwis, dtype=np.int16)

print("\tWrite images to disk")
dwis_img = nib.Nifti1Image(dwis, affine)
nib.save(dwis_img, os.path.join(args.output_dir, args.output))
